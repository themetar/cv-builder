{"version":3,"sources":["components/sections/Personal.js","components/sections/Skills.js","components/CollectionButtons.js","components/sections/OtherSkills.js","components/sections/Chronicle.js","components/EditActions.js","components/Section.js","App.js","index.js"],"names":["Personal","props","handleChange","field","event","data","target","value","onChange","handleContactChange","contactList","slice","index","dataset","mode","typeToType","Map","show","className","name","about","filter","c","replace","map","i","type","href","handleNameChange","bind","handleAboutChange","handleContactTypeChange","handleContactValueChange","inputs","data-index","has","get","Skills","skill","edit","join","split","CollectionButtons","handleAdd","handleRemove","count","onClick","title","aria-hidden","OtherSkills","handleInput","topic","details","handleTopic","handleDetails","push","length","pop","Chronicle","entries","mapFunc","entry","from","until","where","what","description","handleFrom","handleUntil","handleWhere","handleWhat","handleDescription","min","placeholder","year","Date","getFullYear","EditActions","handleClick","onAction","currentTarget","action","data-action","Section","useState","setMode","setData","newData","renderData","id","onUpdate","App","cv","setCV","handleUpdate","sectionId","updated","findIndex","section","window","print","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.93e58707.chunk.js","sourcesContent":["/*\n  Renders the personal info section elements.\n  On input, sends data via callback.\n*/\nfunction Personal(props) {\n\n  function handleChange(field, event) {\n    const data = {...props.data};\n    data[field] = event.target.value;\n    props.onChange(data);\n  }\n\n  function handleContactChange(field, event) {\n    /* shallow copy the contact data */\n    const data = {...props.data};\n    data.contactList = data.contactList.slice();\n    \n    /* modify the apropriate field */\n    const index = event.target.dataset.index;\n    data.contactList[index] = {...data.contactList[index]};\n    data.contactList[index][field] = event.target.value;\n    \n    /* invoke callback */\n    props.onChange(data);\n  }\n\n  const {mode, data} = props;\n  \n  const typeToType = new Map([[\"tel\", \"tel\"], [\"web\", \"url\"], [\"email\", \"email\"]]);\n\n  // when displaying\n  const show = (\n    <div>\n      <h1 className=\"bio-name\">{data.name}</h1>\n      <p className=\"bio-about\">{data.about}</p>\n      <ul className=\"contact-info\">\n      {\n        data.contactList.filter(c => c.value.replace(/\\s/g, \"\") != \"\").map((c, i) => {\n          if (c.type === \"address\") return <li key={i}><span className=\"icon-map\">&nbsp;</span>{c.value}</li>;\n          if (c.type === \"tel\") return <li key={i}><span className=\"icon-phone\">&nbsp;</span><a href={`tel:${c.value}`}>{c.value}</a></li>;\n          if (c.type === \"web\") return <li key={i}><span className=\"icon-earth\">&nbsp;</span><a href={c.value}>{c.value.replace(/(http|https):\\/\\//, '')}</a></li>;\n          /* if (c.type === \"email\") */ return <li key={i}><span className=\"icon-envelope\">&nbsp;</span><a href={`mailto:${c.value}`}>{c.value}</a></li>;\n        })\n      }\n      </ul>\n    </div>\n  );\n\n  const handleNameChange  = handleChange.bind(null, \"name\");\n  const handleAboutChange = handleChange.bind(null, \"about\");\n\n  const handleContactTypeChange  = handleContactChange.bind(null, \"type\");\n  const handleContactValueChange = handleContactChange.bind(null, \"value\");\n\n  // when editing\n  const inputs = (\n    <div>\n      <input type=\"text\" value={data.name} onChange={handleNameChange} className=\"bio-name m-b-1\" />\n      <input type=\"text\" value={data.about} onChange={handleAboutChange} className=\"bio-about m-b-1\" />\n      <ul className=\"contact-info\">\n      {\n        data.contactList.map((c, i) => {\n          return (\n            <li key={i}>\n              <select value={c.type} data-index={i} onChange={handleContactTypeChange}>\n                <option value=\"tel\">Telephone</option>\n                <option value=\"web\">Web site</option>\n                <option value=\"address\">Address</option>\n                <option value=\"email\">e-mail</option>\n              </select>\n              <input type={typeToType.has(c.type) ? typeToType.get(c.type) : \"text\"} data-index={i} value={c.value} onChange={handleContactValueChange}/>\n            </li>\n          );\n        })\n      }\n      </ul>\n    </div>\n  );\n\n  return (mode === \"show\" ? show : inputs);\n}\n\nexport default Personal;\n","/*\n  Render Skills section data.\n  On input, sends data via callback.\n*/\nfunction Skills(props) {\n\n  /*\n    On user input, transform to string array and send to parent via callback\n  */\n  function handleChange(event) {\n    const raw = event.target.value;\n    const data = raw.split(\",\");\n    props.onChange(data);\n  }\n\n  const {mode, data} = props;\n\n  // when displaying\n  const show = (\n    <ul className=\"skills\">\n      {data.map(skill => {\n        return (\n          <li key={skill}>{skill}</li>\n        );\n      })}\n    </ul>\n  );\n\n  // when editing\n  const edit = (\n    <textarea value={data.join(\",\")} onChange={handleChange} className=\"skills-input\" />\n  ); \n\n  return (\n    mode === \"show\" ? show : edit\n  );\n\n}\n\nexport default Skills;\n","import \"./CollectionButtons.css\";\n\nfunction CollectionButtons(props) {\n  const {handleAdd, handleRemove, count} = props;\n\n  return (\n    <div className=\"CollectionButtons\">\n      <button onClick={handleAdd} className=\"plus-btn pop-in\"\n              title=\"Add another item\">\n        <span aria-hidden=\"true\" className=\"icon-plus\"></span>\n        <span className=\"screen-reader-text\">Add</span>\n      </button>\n      {count > 1 &&\n        <button onClick={handleRemove} className=\"cross-btn pop-in\"\n                title=\"Remove item\">\n          <span aria-hidden=\"true\" className=\"icon-cross\"></span>\n          <span className=\"screen-reader-text\">Remove</span>\n        </button>}\n    </div>\n  );\n}\n\nexport default CollectionButtons;\n","import AddRemoveBtns from \"../CollectionButtons\";\n\n/*\n  Displays a collection of topics and information about them\n*/\nfunction OtherSkills(props) {\n  const {data, mode} = props;\n\n  function handleInput(index, field, event) {\n    const data = props.data.slice();\n    data[index] = {...data[index]}; // copy object\n    data[index][field] = event.target.value;\n    props.onChange(data);\n  }\n\n  const showMap = (skill, index) => {\n    return (\n      <div key={index}>\n        <h3>{skill.topic}</h3>\n        <p>{skill.details}</p>\n      </div>\n    );\n  };\n\n  const editMap = (skill, index) => {\n    const handleTopic =   handleInput.bind(null, index, \"topic\");\n    const handleDetails = handleInput.bind(null, index, \"details\");\n\n    return (\n      <div key={index}>\n        <input type=\"text\" value={skill.topic} onChange={handleTopic} className=\"m-b-1/2\" />\n        <textarea value={skill.details} onChange={handleDetails}/>\n      </div>\n    );\n  };\n\n  function handleAdd() {\n    const data = props.data.slice(); // copy array\n\n    // add new entry\n    data.push({\n      topic: \"\",\n      details: \"\",\n    });\n\n    // send data\n    props.onChange(data);\n  }\n\n  function handleRemove() {\n    const data = props.data.slice(); // copy array\n    \n    if (data.length > 1) {\n      // remove last\n      data.pop();\n      // send data\n      props.onChange(data);\n    }\n  }\n\n  return (\n    <div className=\"OtherSkills\">\n      <div className=\"grid m-b-2\">\n      {\n        mode === \"show\" && data.map(showMap)\n      }\n      {\n        mode === \"edit\" && data.map(editMap)\n      }\n      </div>\n      {mode === \"edit\" && (\n        <AddRemoveBtns handleAdd={handleAdd} handleRemove={handleRemove} count={data.length} />\n      )}\n    </div>\n  );  \n}\n\nexport default OtherSkills;\n","import AddRemoveBtns from \"../CollectionButtons\";\n\n/*\n  Renders a history of time periods.\n  Each entry has a start year, an end year, location, title, and an optional description text.\n*/\nfunction Chronicle(props) {\n\n  function handleChange(index, field, event) {\n    const data = props.data.slice(); // copy array\n    data[index] = {...data[index]}; // copy entry\n    data[index][field] = event.target.value; // change field\n    props.onChange(data);\n  }\n\n  function handleAdd() {\n    const data = props.data.slice(); // copy array\n\n    const year = (new Date()).getFullYear();\n\n    // add new entry\n    data.push({\n      from: year,\n      until: year,\n      where: \"Enter Organization name\",\n      what: \"Enter Gained Title\",\n      description: \"\",\n    });\n\n    // send data\n    props.onChange(data);\n  }\n\n  function handleRemove() {\n    const data = props.data.slice(); // copy array\n    if (data.length > 1) {\n      data.pop(); // remove last\n      // send data\n      props.onChange(data);\n    }\n  }\n\n  const {mode} = props;\n  const entries = props.data;\n\n  /*\n    Render show elements\n  */\n  const mapShow = (entry, index) => {\n    const {from, until, where, what, description} = entry;\n\n    return (\n      <div key={index} className=\"chrono-entry\">\n        <p>\n          <span className=\"year-from\">{from}</span>\n          <span className=\"year-until\">{until}</span>  \n          <span className=\"organization\">{where}</span>\n        </p>\n        <p className=\"gained-title\">\n          {what}\n        </p>\n        {description && <p>{description}</p>}\n      </div>  \n    );\n  }\n\n  /*\n    Render edit elements\n  */\n  const mapEdit = (entry, index) => {\n    const {from, until, where, what, description} = entry;\n\n    const handleFrom  =   handleChange.bind(this, index, \"from\");\n    const handleUntil =   handleChange.bind(this, index, \"until\");\n    const handleWhere =   handleChange.bind(this, index, \"where\");\n    const handleWhat  =   handleChange.bind(this, index, \"what\");\n    const handleDescription =   handleChange.bind(this, index, \"description\");\n\n\n    return (\n      <div key={index} className=\"chrono-entry\">\n        <div className=\"edit-when-where m-b-1\">\n          <input type=\"number\" min=\"1900\" value={from} onChange={handleFrom}/>\n          <input type=\"number\" min=\"1900\" value={until} onChange={handleUntil}/>\n          <input type=\"text\" value={where} onChange={handleWhere}/>\n        </div>\n        <input type=\"text\" value={what} onChange={handleWhat} className=\"m-b-1\"/>\n        <input type=\"text\" value={description} placeholder=\"Optional details\" onChange={handleDescription}/>\n      </div>\n    );\n  };\n\n  const mapFunc = mode === \"show\" ? mapShow : mapEdit;\n\n  return (\n    <div>\n      {entries.map(mapFunc)}\n      {mode === \"edit\" && (\n        <AddRemoveBtns handleAdd={handleAdd} handleRemove={handleRemove} count={entries.length} />\n      )}\n    </div>\n  );\n}\n\nexport default Chronicle;\n","import './EditActions.css';\n\nfunction EditActions(props) {\n\n  function handleClick(event) {\n    props.onAction(event.currentTarget.dataset.action);\n  }\n\n  const {mode} = props;\n\n  return (\n    <div className=\"EditActions\">\n      {mode === \"show\" &&\n          <button data-action=\"edit\" onClick={handleClick} className=\"edit-button\"\n                  title=\"Edit\">\n            <span aria-hidden=\"true\" className=\"icon-pencil\"></span>\n            <span className=\"screen-reader-text\">Edit</span>\n          </button>\n      }\n      {mode !== \"show\" &&\n          <button data-action=\"save\" onClick={handleClick} className=\"edit-button m-b-1/2 pop-in\"\n                  title=\"Save\">\n            <span aria-hidden=\"true\" className=\"icon-checkmark\"></span>\n            <span className=\"screen-reader-text\">Save</span>\n          </button>\n      }\n      {mode !== \"show\" &&\n          <button data-action=\"cancel\" onClick={handleClick} className=\"edit-button pop-in\"\n                  title=\"Cancel\">\n            <span aria-hidden=\"true\" className=\"icon-undo\"></span>\n            <span className=\"screen-reader-text\">Cancel</span>\n          </button>\n      }\n    </div>\n  );\n}\n\nexport default EditActions;\n","import Personal from \"./sections/Personal\";\nimport Skills from \"./sections/Skills\";\nimport OtherSkills from \"./sections/OtherSkills\";\nimport Chronicle from \"./sections/Chronicle\";\nimport EditActions from \"./EditActions\";\nimport { useState } from \"react\";\n\n/*\n  Renders a CV section, depending on section type. Manages the edit actions (edit, save, delete..) input.\n*/\nfunction Section(props) {\n  \n  /*\n    State holds a copy of it's section data. This is the working copy that gets modified in edit mode.\n    The local state data gets sent upwards on save, and discarded on cancel.\n  */\n  \n  const [mode, setMode] = useState(\"show\");\n  const [data, setData] = useState(props.data);  \n\n  /*\n    Callback for the EditActions component\n\n    action - \"edit\" | \"cancel\" | \"save\" | \"delete\"\n  */\n  const handleAction = (action) => {\n    const {id, onUpdate} = props;\n\n    if (action === \"edit\") {\n      // change the display mode to editing\n      setMode(\"edit\");\n    }\n    if (action === \"cancel\") {\n      // change the display mode to showing,\n      setMode(\"show\");\n      // and reset state data\n      setData(props.data);\n    }\n    if (action === \"save\") {\n      // change the display mode to showing\n      setMode(\"show\");\n      /* send state data to parent component,\n         where it will be merged with rest of the CV,\n         and passed back down as prop */\n      onUpdate(id, data);\n    }\n  }\n\n  /*\n    User input callback. Updates local state with user's input.\n  */\n  const handleChange = (newData) => {\n    setData(newData);\n  }\n\n  \n  const {type, title} = props;\n  const renderData = mode === \"show\" ? props.data : data;\n\n  return (\n    <section>\n      {title && <h2>{title}</h2>}\n      {type === \"personal\" && <Personal data={renderData} mode={mode} onChange={handleChange} />}\n      {type === \"skills\" && <Skills data={renderData} mode={mode} onChange={handleChange} />}\n      {type === \"chronicle\" && <Chronicle data={renderData} mode={mode} onChange={handleChange} />}\n      {type === \"otherSkills\" && <OtherSkills data={renderData} mode={mode} onChange={handleChange} />}\n      <EditActions mode={mode} onAction={handleAction}/>\n    </section>\n  );\n}\n\nexport default Section;\n","import { useState } from 'react';\nimport './App.css';\nimport Section from \"./components/Section\";\n\nfunction App() {\n    // All of the CV data is held in root state, and propagated to components\n    const [cv, setCV] = useState([\n      {\n        type: \"personal\",\n        id: \"personal\",\n        data: {\n          name: \"Harry James Potter\",\n          about: \"Wizard. Head of the Department of Magical Law Enforcement. The boy who lived.\",\n          contactList: [\n            {\n              type: \"email\", value: \"hpotter@mom.gov.mag\",\n            },\n            {\n              type: \"address\", value: \"Some Street 100, London, England, Great Britain\",\n            },\n            {\n              type: \"tel\", value: \"555-666-444\",\n            },\n            {\n              type: \"web\", value: \"https://harrypotter.fandom.com/wiki/Harry_Potter\",\n            },\n          ],\n        },\n      },\n      {\n        type: \"skills\",\n        id: \"skills\",\n        title: \"Skills\",\n        data: [\n          \"Defence against Dark Arts\",\n          \"Advanced broomstick piloting\",\n          \"Care of Magical Animals\",\n          \"Parseltongue\",\n          \"MS Office\",\n        ],\n      },\n      {\n        type: \"chronicle\",\n        id: \"education\",\n        title: \"Education\",\n        data: [\n          {\n            from: \"1991\",\n            until: \"1997\",\n            where: \"Hogwarts School of Witchcraft and Wizardry\",\n            what: \"Graduate\",\n          },\n        ]\n      },\n      {\n        type: \"chronicle\",\n        id: \"work\",\n        title: \"Work\",\n        data: [\n          {\n            from: \"2017\",\n            until: \"\",\n            where: \"British Ministry of Magic\",\n            what: \"Head of the Department of Magical Law Enforcement\",\n            description: \"Oversees all operations of all subsections of the Department\",\n          },\n          {\n            from: \"2007\",\n            until: \"2016\",\n            where: \"British Ministry of Magic\",\n            what: \"Auror\",\n            description: \"Revolutionised the Auror Department at the Ministry of Magic\",\n          },\n        ]\n      },\n      {\n        type: \"otherSkills\",\n        id: \"other\",\n        title: \"Other Skills\",\n        data: [\n          {\n            topic: \"Quidditch\",\n            details: \"Won two Quidditch cups.\"\n          },\n        ]\n      },\n    ]);\n\n  /*\n    Update callback. Icorporates updates from edited sections into cv\n\n    section - Which section the data is for\n    data - New data\n  */\n  function handleUpdate(sectionId, data) {\n    const updated = cv.slice();\n    updated[cv.findIndex(entry => entry.id === sectionId)].data = data;\n    setCV(updated);\n  }\n\n  /*\n    Click handler for the print button.\n  */\n  function handlePrintButton(event) {\n    window.print();\n  }\n\n  return (\n    <div className=\"App\">\n      {cv.map(section => (\n        <Section key={section.id} id={section.id} type={section.type} title={section.title} data={section.data} onUpdate={handleUpdate} />\n      ))}\n      <button onClick={handlePrintButton} className=\"print-btn\"\n              title=\"Print your CV\">Print</button>\n      <footer>\n        Made by <a href=\"https://github.com/themetar\" target=\"_blank\">@themetar</a>\n      </footer>\n    </div>\n  );\n  \n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport './fonts/icons.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}